{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","helpers/validators.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validate","useState","Math","random","toString","slice","id","touched","setTouched","isValid","setIsValid","hasError","showErrorMessage","validInvalidText","errorMessage","htmlFor","classNames","type","placeholder","event","target","onBlur","validateLink","link","test","validateString","string","initialFormState","NewMovie","onAdd","count","setCount","formState","setFormState","handleChange","key","state","isValidForSubmit","every","i","onSubmit","newMovie","disabled","App","moviesFromServer","visibleMovies","seVisibleMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e71c5994.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string, key: string) => void,\n  validate?: (string: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => { },\n  validate = () => true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [isValid, setIsValid] = useState<null | boolean>(null);\n\n  const hasError = touched && required && !value;\n  const showErrorMessage = hasError || isValid === false;\n  const validInvalidText = value && isValid === false\n    ? 'incorrect'\n    : 'required';\n  const errorMessage = `${label} is ${validInvalidText}`;\n\n  const handleOnBLur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTouched(true);\n    setIsValid(validate(event.target.value));\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value, name);\n          }}\n          onBlur={handleOnBLur}\n        />\n      </div>\n\n      {(showErrorMessage) && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","export const validateLink = (link: string) => {\n  // eslint-disable-next-line max-len\n  return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/.test(link);\n};\n\nexport const validateString = (string: string) => {\n  return /\\S/.test(string);\n};\n\nexport const validateImdbId = (id: string) => {\n  return /[a-z]{2}[0-9]{7}/.test(id);\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { validateLink, validateString } from '../../helpers/validators';\n\nconst initialFormState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formState, setFormState] = useState(initialFormState);\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = formState;\n\n  const handleSubmit = () => {\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    setFormState(initialFormState);\n\n    onAdd(newMovie);\n    setCount(state => state + 1);\n  };\n\n  const handleChange = (\n    value: string,\n    key: string,\n  ) => {\n    setFormState(state => ({\n      ...state,\n      [key]: value,\n    }));\n  };\n\n  const isValidForSubmit = [title, imgUrl, imdbUrl, imdbId]\n    .every((key, i) => {\n      if (i === 1 || i === 2) {\n        return validateLink(key);\n      }\n\n      return validateString(key);\n    });\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleChange}\n        validate={validateString}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleChange}\n        validate={validateLink}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleChange}\n        validate={validateLink}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleChange}\n        validate={validateString}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isValidForSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [visibleMovies, seVisibleMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    seVisibleMovies(state => [...state, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}